apiVersion: policy.open-cluster-management.io/v1
kind: Policy
metadata:
  name: backup-etcd-policy
  namespace: default
  annotations:
    policy.open-cluster-management.io/standards: NIST-CSF
    policy.open-cluster-management.io/categories: PR.IP Information Protection Processes and Procedures
    policy.open-cluster-management.io/controls: PR.IP-1 Baseline Configuration
spec:
  remediationAction: enforce
  disabled: false
  policy-templates:
    - objectDefinition:
        apiVersion: policy.open-cluster-management.io/v1
        kind: ConfigurationPolicy
        metadata:
          name: backup-etcd-policy-sa
        spec:
          remediationAction: inform # will be overridden by remediationAction in parent policy
          severity: low
          namespaceSelector:
            exclude: ["kube-*"]
            include: ["default"]
          object-templates:
            - complianceType: musthave
              objectDefinition:
                kind: ServiceAccount
                apiVersion: v1
                metadata:
                  name: approver
                  namespace: openshift-config
    - objectDefinition:
        apiVersion: policy.open-cluster-management.io/v1
        kind: ConfigurationPolicy
        metadata:
          name: backup-etcd-policy-crb
        spec:
          remediationAction: inform # will be overridden by remediationAction in parent policy
          severity: low
          namespaceSelector:
            exclude: ["kube-*"]
            include: ["default"]
          object-templates:
            - complianceType: musthave
              objectDefinition:
                kind: ClusterRoleBinding
                apiVersion: rbac.authorization.k8s.io/v1
                metadata:
                  name: cluster-admin-approver-sa-crb  
                subjects:
                  - kind: ServiceAccount
                    name: approver 
                    namespace: openshift-config 
                roleRef:
                  kind: ClusterRole
                  name: cluster-admin
                  apiGroup: rbac.authorization.k8s.io
    - objectDefinition:
        apiVersion: policy.open-cluster-management.io/v1
        kind: ConfigurationPolicy
        metadata:
          name: backup-etcd-policy-pvc
        spec:
          remediationAction: inform # will be overridden by remediationAction in parent policy
          severity: low
          namespaceSelector:
            exclude: ["kube-*"]
            include: ["default"]
          object-templates:
            - complianceType: musthave
              objectDefinition:
                kind: PersistentVolumeClaim
                apiVersion: v1
                metadata:
                  name: etcd-backup
                  namespace: openshift-config
                spec:
                  accessModes:
                    - ReadWriteOnce
                  resources:
                    requests:
                      storage: 20Gi

    - objectDefinition:
        apiVersion: policy.open-cluster-management.io/v1
        kind: ConfigurationPolicy
        metadata:
          name: backup-etcd-policy-cm
        spec:
          remediationAction: inform # will be overridden by remediationAction in parent policy
          severity: low
          namespaceSelector:
            exclude: ["kube-*"]
            include: ["default"]
          object-templates:
            - complianceType: musthave
              objectDefinition:
                kind: ConfigMap
                apiVersion: v1
                metadata:
                  name: etcd-backup-script
                  namespace: openshift-config
                data:
                  etcd-backup.sh: |2+

                    DATE=$(date +%Y%m%dT%H%M%S)

                    /usr/local/bin/etcd-snapshot-backup-disconnected.sh /assets/backup

                    if [ $? -eq 0 ]; then
                        mkdir /etcd-backup/${DATE}
                        cp -r /assets/backup/*  /etcd-backup/${DATE}/
                        echo 'Copied backup files to PVC mount point.'
                        exit 0
                    fi

                    echo "Backup attempts failed. Please FIX !!!"
                    exit 1

                  etcd-snapshot-backup-disconnected.sh: "\nset -o errexit\nset -o pipefail\nset -o
                    errtrace\n\nif [[ $EUID -ne 0 ]]; then\n  echo \"This script must be run as root\"\n
                    \ exit 1\nfi\n\nfunction usage {\n  echo 'Path to backup dir required: ./cluster-backup.sh
                    <path-to-backup-dir>'\n  exit 1\n}\n\n\nif [ -z \"$1\" ] || [ -f \"$1\" ]; then\n
                    \ usage\nfi\n\nif [ ! -d \"$1\" ]; then\n  mkdir -p $1\nfi\n\nfunction backup_latest_kube_static_resources
                    {\n  \n  RESOURCES=(\"$@\")\n\n  LATEST_RESOURCE_DIRS=()\n  for RESOURCE in \"${RESOURCES[@]}\";
                    do\n    LATEST_RESOURCE=$(ls -trd \"${CONFIG_FILE_DIR}\"/static-pod-resources/${RESOURCE}-[0-9]*
                    | tail -1) || true\n    if [ -z \"$LATEST_RESOURCE\" ]; then\n      echo \"error
                    finding static-pod-resource ${RESOURCE}\"\n      exit 1\n    fi\n\n    echo \"found
                    latest ${RESOURCE}: ${LATEST_RESOURCE}\"\n    LATEST_RESOURCE_DIRS+=(\"${LATEST_RESOURCE#${CONFIG_FILE_DIR}/}\")\n
                    \ done\n\n  tar -cpzf $BACKUP_TAR_FILE -C ${CONFIG_FILE_DIR} \"${LATEST_RESOURCE_DIRS[@]}\"\n
                    }\n\n  BACKUP_DIR=\"$1\"\n  \n  DATESTRING=$(date \"+%F_%H%M%S\")\n  \n  BACKUP_TAR_FILE=${BACKUP_DIR}/static_kuberesources_${DATESTRING}.tar.gz\n
                    \ \n  SNAPSHOT_FILE=\"${BACKUP_DIR}/snapshot_${DATESTRING}.db\"\n  \n  BACKUP_RESOURCE_LIST=(\"kube-apiserver-pod\"
                    \"kube-controller-manager-pod\" \"kube-scheduler-pod\" \"etcd-pod\")\n\n  trap
                    \"rm -f ${BACKUP_TAR_FILE} ${SNAPSHOT_FILE}\" ERR\n\n  source /etc/kubernetes/static-pod-resources/etcd-certs/configmaps/etcd-scripts/etcd.env\n
                    \ \n  source /etc/kubernetes/static-pod-resources/etcd-certs/configmaps/etcd-scripts/etcd-common-tools\n\n
                    \ if [ ! -f \"$ETCDCTL_CACERT\" ] && [ ! -d \"${CONFIG_FILE_DIR}/static-pod-certs\"
                    ]; then\n    ln -s ${CONFIG_FILE_DIR}/static-pod-resources/etcd-certs ${CONFIG_FILE_DIR}/static-pod-certs\n
                    \ fi\n\n  backup_latest_kube_static_resources \"${BACKUP_RESOURCE_LIST[@]}\"\n
                    \ \n  etcdctl snapshot save ${SNAPSHOT_FILE}\n  \n  echo \"snapshot db and kube
                    resources are successfully saved to ${BACKUP_DIR}\"\n\n"

---
apiVersion: policy.open-cluster-management.io/v1
kind: PlacementBinding
metadata:
  name: binding-backup-etcd-policy
  namespace: default
placementRef:
  name: placement-backup-etcd-policy
  kind: PlacementRule
  apiGroup: apps.open-cluster-management.io
subjects:
- name: backup-etcd-policy
  kind: Policy
  apiGroup: policy.open-cluster-management.io
---
apiVersion: apps.open-cluster-management.io/v1
kind: PlacementRule
metadata:
  name: placement-backup-etcd-policy
  namespace: default
spec:
  clusterConditions:
  - status: "True"
    type: ManagedClusterConditionAvailable
  clusterSelector:
    matchExpressions:
      - {key: etcdbackup, operator: In, values: ["yes"]}
