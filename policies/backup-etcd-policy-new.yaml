apiVersion: policy.open-cluster-management.io/v1
kind: Policy
metadata:
  name: backup-etcd-policy
  namespace: openshift-config
  annotations:
    policy.open-cluster-management.io/standards: NIST-CSF
    policy.open-cluster-management.io/categories: PR.IP Information Protection Processes and Procedures
    policy.open-cluster-management.io/controls: PR.IP-1 Baseline Configuration
spec:
  remediationAction: enforce
  disabled: false
  policy-templates:
    - objectDefinition:
        apiVersion: policy.open-cluster-management.io/v1
        kind: ConfigurationPolicy
        metadata:
          name: backup-etcd-policy-sa
        spec:
          remediationAction: inform # will be overridden by remediationAction in parent policy
          severity: low
          namespaceSelector:
            exclude: ["kube-*"]
            include: ["default"]
          object-templates:
            - complianceType: musthave
              objectDefinition:
                kind: ServiceAccount
                apiVersion: v1
                metadata:
                  name: approver
                  namespace: openshift-config
    - objectDefinition:
        apiVersion: policy.open-cluster-management.io/v1
        kind: ConfigurationPolicy
        metadata:
          name: backup-etcd-policy-crb
        spec:
          remediationAction: inform # will be overridden by remediationAction in parent policy
          severity: low
          namespaceSelector:
            exclude: ["kube-*"]
            include: ["default"]
          object-templates:
            - complianceType: musthave
              objectDefinition:
                kind: ClusterRoleBinding
                apiVersion: rbac.authorization.k8s.io/v1
                metadata:
                  name: cluster-admin-approver-sa-crb  
                subjects:
                  - kind: ServiceAccount
                    name: approver 
                    namespace: openshift-config 
                roleRef:
                  kind: ClusterRole
                  name: cluster-admin
                  apiGroup: rbac.authorization.k8s.io
    - objectDefinition:
        apiVersion: policy.open-cluster-management.io/v1
        kind: ConfigurationPolicy
        metadata:
          name: backup-etcd-policy-pvc
        spec:
          remediationAction: inform # will be overridden by remediationAction in parent policy
          severity: low
          namespaceSelector:
            exclude: ["kube-*"]
            include: ["default"]
          object-templates:
            - complianceType: musthave
              objectDefinition:
                kind: PersistentVolumeClaim
                apiVersion: v1
                metadata:
                  name: etcd-backup
                  namespace: openshift-config
                spec:
                  accessModes:
                    - ReadWriteOnce
                  resources:
                    requests:
                      storage: 20Gi

    - objectDefinition:
        apiVersion: policy.open-cluster-management.io/v1
        kind: ConfigurationPolicy
        metadata:
          name: backup-etcd-policy-cm
        spec:
          remediationAction: inform # will be overridden by remediationAction in parent policy
          severity: low
          namespaceSelector:
            exclude: ["kube-*"]
            include: ["default"]
          object-templates:
            - complianceType: musthave
              objectDefinition:
                kind: ConfigMap
                apiVersion: v1
                metadata:
                  name: etcd-backup-script
                  namespace: openshift-config
                    kind: ConfigMap
                    apiVersion: v1
                    metadata:
                      name: etcd-backup-script
                      namespace: openshift-config
                    data:
                      etcd-backup.sh: |
                        #!/bin/bash

                        DATE=$(date +%Y%m%dT%H%M%S)

                        /usr/local/bin/etcd-snapshot-backup-disconnected.sh /assets/backup

                        if [ $? -eq 0 ]; then
                            mkdir /etcd-backup/${DATE}
                            cp -r /assets/backup/*  /etcd-backup/${DATE}/
                            echo 'Copied backup files to PVC mount point.'
                            exit 0
                        fi

                        echo "Backup attempts failed. Please FIX !!!"
                        exit 1
                      etcd-snapshot-backup-disconnected.sh: >
                        #!/usr/bin/env bash


                        ### Created by cluster-etcd-operator. DO NOT edit.


                        set -o errexit

                        set -o pipefail

                        set -o errtrace


                        # example

                        # cluster-backup.sh $path-to-snapshot


                        if [[ $EUID -ne 0 ]]; then
                          echo "This script must be run as root"
                          exit 1
                        fi


                        function usage {
                          echo 'Path to backup dir required: ./cluster-backup.sh <path-to-backup-dir>'
                          exit 1
                        }


                        # If the first argument is missing, or it is an existing file, then print
                        usage and exit

                        if [ -z "$1" ] || [ -f "$1" ]; then
                          usage
                        fi


                        if [ ! -d "$1" ]; then
                          mkdir -p $1
                        fi


                        # backup latest static pod resources

                        function backup_latest_kube_static_resources {
                          RESOURCES=("$@")

                          LATEST_RESOURCE_DIRS=()
                          for RESOURCE in "${RESOURCES[@]}"; do
                            LATEST_RESOURCE=$(ls -trd "${CONFIG_FILE_DIR}"/static-pod-resources/${RESOURCE}-[0-9]* | tail -1) || true
                            if [ -z "$LATEST_RESOURCE" ]; then
                              echo "error finding static-pod-resource ${RESOURCE}"
                              exit 1
                            fi

                            echo "found latest ${RESOURCE}: ${LATEST_RESOURCE}"
                            LATEST_RESOURCE_DIRS+=("${LATEST_RESOURCE#${CONFIG_FILE_DIR}/}")
                          done

                          # tar latest resources with the path relative to CONFIG_FILE_DIR
                          tar -cpzf $BACKUP_TAR_FILE -C ${CONFIG_FILE_DIR} "${LATEST_RESOURCE_DIRS[@]}"
                        }


                        BACKUP_DIR="$1"

                        DATESTRING=$(date "+%F_%H%M%S")

                        BACKUP_TAR_FILE=${BACKUP_DIR}/static_kuberesources_${DATESTRING}.tar.gz

                        SNAPSHOT_FILE="${BACKUP_DIR}/snapshot_${DATESTRING}.db"

                        BACKUP_RESOURCE_LIST=("kube-apiserver-pod" "kube-controller-manager-pod"
                        "kube-scheduler-pod" "etcd-pod")


                        trap "rm -f ${BACKUP_TAR_FILE} ${SNAPSHOT_FILE}" ERR


                        source
                        /etc/kubernetes/static-pod-resources/etcd-certs/configmaps/etcd-scripts/etcd.env

                        source
                        /etc/kubernetes/static-pod-resources/etcd-certs/configmaps/etcd-scripts/etcd-common-tools


                        # TODO handle properly

                        if [ ! -f "$ETCDCTL_CACERT" ] && [ ! -d
                        "${CONFIG_FILE_DIR}/static-pod-certs" ]; then
                          ln -s ${CONFIG_FILE_DIR}/static-pod-resources/etcd-certs ${CONFIG_FILE_DIR}/static-pod-certs
                        fi


                        # Commenting this out as we are running this script via a cron job.

                        # dl_etcdctl

                        backup_latest_kube_static_resources "${BACKUP_RESOURCE_LIST[@]}"

                        etcdctl snapshot save ${SNAPSHOT_FILE}

                        echo "snapshot db and kube resources are successfully saved to


    - objectDefinition:
        apiVersion: policy.open-cluster-management.io/v1
        kind: ConfigurationPolicy
        metadata:
          name: backup-etcd-policy-job
        spec:
          remediationAction: inform # will be overridden by remediationAction in parent policy
          severity: low
          namespaceSelector:
            exclude: ["kube-*"]
            include: ["default"]
          object-templates:
            - complianceType: musthave
              objectDefinition:
                kind: CronJob
                apiVersion: batch/v1beta1
                metadata:
                  name: cronjob-etcd-backup
                  namespace: openshift-config
                  labels:
                    purpose: etcd-backup
                spec:
                  schedule: "*/1 * * * *"
                  startingDeadlineSeconds: 200
                  concurrencyPolicy: Forbid
                  suspend: false
                  jobTemplate:
                    spec:
                      backoffLimit: 0
                      template:
                        spec:
                          nodeSelector:
                            node-role.kubernetes.io/master: ''
                          restartPolicy: Never
                          activeDeadlineSeconds: 200
                          serviceAccountName: approver
                          hostNetwork: true
                          containers:
                            - resources:
                                requests:
                                  cpu: 300m
                                  memory: 250Mi
                              terminationMessagePath: /dev/termination-log
                              name: etcd-backup
                              command:
                                - /bin/sh
                                - '-c'
                                - >-
                                  /usr/local/bin/etcd-backup.sh && ls -1 /etcd-backup/* | sort -r | tail -n +6 | xargs rm -rf > /dev/null 2>&1
                              env:
                              securityContext:
                                privileged: true
                              imagePullPolicy: IfNotPresent
                              volumeMounts:
                                - name: certs
                                  mountPath: /etc/ssl/etcd/
                                - name: conf
                                  mountPath: /etc/etcd/
                                - name: kubeconfig
                                  mountPath: /etc/kubernetes/
                                - name: etcd-backup-script
                                  mountPath: /usr/local/bin/etcd-backup.sh
                                  subPath: etcd-backup.sh
                                - name: etcd-backup-script
                                  mountPath: /usr/local/bin/etcd-snapshot-backup-disconnected.sh
                                  subPath: etcd-snapshot-backup-disconnected.sh
                                - name: etcd-backup
                                  mountPath: /etcd-backup
                                - name: scripts
                                  mountPath: /usr/local/bin
                              terminationMessagePolicy: FallbackToLogsOnError
                              image: >-
                                quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:6a2378154881e6f9a4638f41242518d850e19b0d7d9ef74a2be55b87f4625e87
                          serviceAccount: approver
                          tolerations:
                            - operator: Exists
                              effect: NoSchedule
                            - operator: Exists
                              effect: NoExecute
                          volumes:
                            - name: certs
                              hostPath:
                                path: /etc/kubernetes/static-pod-resources/etcd-member
                                type: ''
                            - name: conf
                              hostPath:
                                path: /etc/etcd
                                type: ''
                            - name: kubeconfig
                              hostPath:
                                path: /etc/kubernetes
                                type: ''
                            - name: scripts
                              hostPath:
                                path: /usr/local/bin
                                type: ''
                            - name: etcd-backup
                              persistentVolumeClaim:
                                claimName: etcd-backup
                            - name: etcd-backup-script
                              configMap:
                                name: etcd-backup-script
                                defaultMode: 493


---
apiVersion: policy.open-cluster-management.io/v1
kind: PlacementBinding
metadata:
  name: binding-backup-etcd-policy
  namespace: openshift-config
placementRef:
  name: placement-backup-etcd-policy
  kind: PlacementRule
  apiGroup: apps.open-cluster-management.io
subjects:
- name: backup-etcd-policy
  kind: Policy
  apiGroup: policy.open-cluster-management.io
---
apiVersion: apps.open-cluster-management.io/v1
kind: PlacementRule
metadata:
  name: placement-backup-etcd-policy
  namespace: openshift-config
spec:
  clusterConditions:
  - status: "True"
    type: ManagedClusterConditionAvailable
  clusterSelector:
    matchExpressions:
      - {key: etcdbackup, operator: In, values: ["yes"]}
